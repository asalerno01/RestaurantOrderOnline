// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalernoServer.Models;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240218202004_Changed-Dependency-On-Snapshot-Children")]
    partial class ChangedDependencyOnSnapshotChildren
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SalernoServer.Models.Authentication.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeId"), 1L, 1);

                    b.Property<bool>("BackOfficeAccess")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterCode")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Addon", b =>
                {
                    b.Property<long>("AddonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddonId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifierSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AddonId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ModifierSnapshotId");

                    b.ToTable("Addons");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Group", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GroupId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifierSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GroupId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ModifierSnapshotId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.GroupOption", b =>
                {
                    b.Property<long>("GroupOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GroupOptionId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GroupOptionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupSnapshotId");

                    b.ToTable("GroupOptions");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Item", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AssignedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CategorySnapshotId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discountable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSoldDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LiabilityItem")
                        .HasColumnType("bit");

                    b.Property<string>("LiabilityRedemptionTender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedOrder")
                        .HasColumnType("int");

                    b.Property<int>("ReorderTrigger")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxGroupOrRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<bool>("TrackingInventory")
                        .HasColumnType("bit");

                    b.Property<string>("UPC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategorySnapshotId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Modifier", b =>
                {
                    b.Property<long>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ModifierId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ModifierId");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Modifiers");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.NoOption", b =>
                {
                    b.Property<long>("NoOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NoOptionId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifierSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NoOptionId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ModifierSnapshotId");

                    b.ToTable("NoOptions");
                });

            modelBuilder.Entity("Server.Models.Authentication.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Server.Models.ItemModels.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.AddonSnapshot", b =>
                {
                    b.Property<long>("AddonSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddonSnapshotId"), 1L, 1);

                    b.Property<long>("AddonId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AddonSnapshotId");

                    b.HasIndex("AddonId");

                    b.HasIndex("ModifierId");

                    b.ToTable("AddonSnapshots");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.CategorySnapshot", b =>
                {
                    b.Property<long>("CategorySnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategorySnapshotId"), 1L, 1);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CategorySnapshotId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategorySnapshots");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.GroupOptionSnapshot", b =>
                {
                    b.Property<long>("GroupOptionSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GroupOptionSnapshotId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupOptionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GroupOptionSnapshotId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupOptionId");

                    b.ToTable("GroupOptionSnapshots");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.GroupSnapshot", b =>
                {
                    b.Property<long>("GroupSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GroupSnapshotId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("GroupSnapshotId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ModifierId");

                    b.ToTable("GroupSnapshots");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.ItemSnapshot", b =>
                {
                    b.Property<long>("ItemSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemSnapshotId"), 1L, 1);

                    b.Property<decimal>("AssignedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discountable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastSoldDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LiabilityItem")
                        .HasColumnType("bit");

                    b.Property<string>("LiabilityRedemptionTender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedOrder")
                        .HasColumnType("int");

                    b.Property<int>("ReorderTrigger")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxGroupOrRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<bool>("TrackingInventory")
                        .HasColumnType("bit");

                    b.Property<string>("UPC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ItemSnapshotId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ModifierId")
                        .IsUnique();

                    b.ToTable("ItemSnapshots");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.ModifierSnapshot", b =>
                {
                    b.Property<long>("ModifierSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ModifierSnapshotId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ModifierSnapshotId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ModifierId");

                    b.ToTable("ModifierSnapshots");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.NoOptionSnapshot", b =>
                {
                    b.Property<long>("NoOptionSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NoOptionSnapshotId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NoOptionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NoOptionSnapshotId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("NoOptionId");

                    b.ToTable("NoOptionSnapshots");
                });

            modelBuilder.Entity("Server.Models.OrderModels.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"), 1L, 1);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("QuotedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SubtotalTax")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItem", b =>
                {
                    b.Property<long>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderItemId"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ItemSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ItemSnapshotId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItemAddon", b =>
                {
                    b.Property<long>("OrderItemAddonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderItemAddonId"), 1L, 1);

                    b.Property<long>("AddonSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("OrderItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrderItemAddonId");

                    b.HasIndex("AddonSnapshotId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemAddons");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItemGroup", b =>
                {
                    b.Property<long>("OrderItemGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderItemGroupId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("GroupOptionSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrderItemGroupId");

                    b.HasIndex("GroupOptionSnapshotId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemGroups");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItemNoOption", b =>
                {
                    b.Property<long>("OrderItemNoOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderItemNoOptionId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("NoOptionSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrderItemNoOptionId");

                    b.HasIndex("NoOptionSnapshotId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemNoOptions");
                });

            modelBuilder.Entity("Server.Models.OrderModels.SavedOrder", b =>
                {
                    b.Property<long>("SavedOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SavedOrderId"), 1L, 1);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("LastOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SavedOrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("SavedOrders");
                });

            modelBuilder.Entity("Server.Models.OrderModels.SavedOrderOrderItem", b =>
                {
                    b.Property<long>("SavedOrderOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SavedOrderOrderItemId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("OrderItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SavedOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SavedOrderOrderItemId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("SavedOrderId");

                    b.ToTable("SavedOrderOrderItems");
                });

            modelBuilder.Entity("Server.Old.Review", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReviewId"), 1L, 1);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("AccountId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Addon", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithMany("Addons")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.ItemModels.SnapshotModels.ModifierSnapshot", null)
                        .WithMany("Addons")
                        .HasForeignKey("ModifierSnapshotId");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Group", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithMany("Groups")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.ItemModels.SnapshotModels.ModifierSnapshot", null)
                        .WithMany("Groups")
                        .HasForeignKey("ModifierSnapshotId");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.GroupOption", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Group", "Group")
                        .WithMany("GroupOptions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.ItemModels.SnapshotModels.GroupSnapshot", null)
                        .WithMany("GroupOptions")
                        .HasForeignKey("GroupSnapshotId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Item", b =>
                {
                    b.HasOne("Server.Models.ItemModels.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ItemModels.SnapshotModels.CategorySnapshot", null)
                        .WithMany("Items")
                        .HasForeignKey("CategorySnapshotId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Modifier", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Item", "Item")
                        .WithOne("Modifier")
                        .HasForeignKey("SalernoServer.Models.ItemModels.Modifier", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.NoOption", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithMany("NoOptions")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Models.ItemModels.SnapshotModels.ModifierSnapshot", null)
                        .WithMany("NoOptions")
                        .HasForeignKey("ModifierSnapshotId");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.AddonSnapshot", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Addon", "Addon")
                        .WithMany()
                        .HasForeignKey("AddonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addon");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.CategorySnapshot", b =>
                {
                    b.HasOne("Server.Models.ItemModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.GroupOptionSnapshot", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalernoServer.Models.ItemModels.GroupOption", "GroupOption")
                        .WithMany()
                        .HasForeignKey("GroupOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("GroupOption");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.GroupSnapshot", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.ItemSnapshot", b =>
                {
                    b.HasOne("Server.Models.ItemModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalernoServer.Models.ItemModels.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithOne()
                        .HasForeignKey("Server.Models.ItemModels.SnapshotModels.ItemSnapshot", "ModifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.ModifierSnapshot", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.NoOptionSnapshot", b =>
                {
                    b.HasOne("SalernoServer.Models.ItemModels.Modifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalernoServer.Models.ItemModels.NoOption", "NoOption")
                        .WithMany()
                        .HasForeignKey("NoOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("NoOption");
                });

            modelBuilder.Entity("Server.Models.OrderModels.Order", b =>
                {
                    b.HasOne("Server.Models.Authentication.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItem", b =>
                {
                    b.HasOne("Server.Models.ItemModels.SnapshotModels.ItemSnapshot", "Item")
                        .WithMany()
                        .HasForeignKey("ItemSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.OrderModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItemAddon", b =>
                {
                    b.HasOne("Server.Models.ItemModels.SnapshotModels.AddonSnapshot", "Addon")
                        .WithMany()
                        .HasForeignKey("AddonSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.OrderModels.OrderItem", null)
                        .WithMany("Addons")
                        .HasForeignKey("OrderItemId");

                    b.Navigation("Addon");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItemGroup", b =>
                {
                    b.HasOne("Server.Models.ItemModels.SnapshotModels.GroupOptionSnapshot", "GroupOption")
                        .WithMany()
                        .HasForeignKey("GroupOptionSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.OrderModels.OrderItem", null)
                        .WithMany("Groups")
                        .HasForeignKey("OrderItemId");

                    b.Navigation("GroupOption");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItemNoOption", b =>
                {
                    b.HasOne("Server.Models.ItemModels.SnapshotModels.NoOptionSnapshot", "NoOption")
                        .WithMany()
                        .HasForeignKey("NoOptionSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.OrderModels.OrderItem", null)
                        .WithMany("NoOptions")
                        .HasForeignKey("OrderItemId");

                    b.Navigation("NoOption");
                });

            modelBuilder.Entity("Server.Models.OrderModels.SavedOrder", b =>
                {
                    b.HasOne("Server.Models.Authentication.Account", "Account")
                        .WithMany("SavedOrders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Server.Models.OrderModels.SavedOrderOrderItem", b =>
                {
                    b.HasOne("Server.Models.OrderModels.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId");

                    b.HasOne("Server.Models.OrderModels.SavedOrder", "SavedOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("SavedOrderId");

                    b.Navigation("OrderItem");

                    b.Navigation("SavedOrder");
                });

            modelBuilder.Entity("Server.Old.Review", b =>
                {
                    b.HasOne("Server.Models.Authentication.Account", "Account")
                        .WithMany("Reviews")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Group", b =>
                {
                    b.Navigation("GroupOptions");
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Item", b =>
                {
                    b.Navigation("Modifier")
                        .IsRequired();
                });

            modelBuilder.Entity("SalernoServer.Models.ItemModels.Modifier", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("Groups");

                    b.Navigation("NoOptions");
                });

            modelBuilder.Entity("Server.Models.Authentication.Account", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("SavedOrders");
                });

            modelBuilder.Entity("Server.Models.ItemModels.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.CategorySnapshot", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.GroupSnapshot", b =>
                {
                    b.Navigation("GroupOptions");
                });

            modelBuilder.Entity("Server.Models.ItemModels.SnapshotModels.ModifierSnapshot", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("Groups");

                    b.Navigation("NoOptions");
                });

            modelBuilder.Entity("Server.Models.OrderModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Server.Models.OrderModels.OrderItem", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("Groups");

                    b.Navigation("NoOptions");
                });

            modelBuilder.Entity("Server.Models.OrderModels.SavedOrder", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
